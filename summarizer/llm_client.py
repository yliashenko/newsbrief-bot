import aiohttp
import asyncio
import time
from config import GROQ_API_KEY, DEFAULT_MODEL, FALLBACK_MODEL, MAX_RETRIES, SYSTEM_PROMPT
from shared.logger import logger

HEADERS = {
    "Authorization": f"Bearer {GROQ_API_KEY}",
    "Content-Type": "application/json"
}

async def call_llm(prompt: str, model: str = DEFAULT_MODEL, attempt: int = 1) -> str:
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        await asyncio.sleep(1.5)
        start_time = time.time()
        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers=HEADERS,
                json=payload
            ) as response:

                duration = time.time() - start_time
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"{response.status} {response.reason}: {error_text}")
                data = await response.json()

        logger.info(f"‚úÖ Groq –≤—ñ–¥–ø–æ–≤—ñ–¥—å ({model}) –∑–∞ {duration:.2f}—Å")
        return str(data["choices"][0]["message"]["content"])

    except asyncio.TimeoutError:
        logger.warning(f"‚è≥ [–°–ø—Ä–æ–±–∞ {attempt}] –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ LLM.")
        if attempt < MAX_RETRIES:
            await asyncio.sleep(2 * attempt)
            return await call_llm(prompt, model=model, attempt=attempt + 1)
        elif model != FALLBACK_MODEL:
            logger.warning(f"üîÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ fallback-–º–æ–¥–µ–ª—å: {FALLBACK_MODEL}")
            return await call_llm(prompt, model=FALLBACK_MODEL, attempt=1)
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–≤—ñ—Ç—å –∑ fallback-–º–æ–¥–µ–ª–ª—é.")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞. –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–æ LLM."

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è [–°–ø—Ä–æ–±–∞ {attempt}] Groq –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –º–æ–¥–µ–ª—ñ {model}: {e}")

        if attempt < MAX_RETRIES:
            await asyncio.sleep(2 * attempt)
            return await call_llm(prompt, model=model, attempt=attempt + 1)

        elif model != FALLBACK_MODEL:
            logger.warning(f"üîÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ fallback-–º–æ–¥–µ–ª—å: {FALLBACK_MODEL}")
            return await call_llm(prompt, model=FALLBACK_MODEL, attempt=1)

        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–≤—ñ—Ç—å –∑ fallback-–º–æ–¥–µ–ª–ª—é.")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞. –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
