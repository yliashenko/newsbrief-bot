import asyncio
from digest.digest_thread import DigestThread
import json
from config import CHANNEL_GROUPS as CHANNEL_GROUPS_PATH
from shared.logger import logger
from bot.formatter import format_digest
from bot.poster import send_html_message
from bot.telegram_client import client
from bot.cache import init_db

llm_queue = asyncio.Queue()

async def run_digest_threads():
    with open(CHANNEL_GROUPS_PATH, "r", encoding="utf-8") as f:
        groups = json.load(f)

    for category, channels in groups.items():
        thread = DigestThread(category, channels, llm_queue)
        await thread.run()

async def llm_worker():
    while True:
        try:
            task = await llm_queue.get()
            category = task["category"]
            posts = task["posts"]
            emoji = task["emoji"]
            logger.info(f"üéØ llm_worker –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–¥–∞—á—É: {category} ({len(posts)} –ø–æ—Å—Ç—ñ–≤)")

            digest = await format_digest(category, posts, emoji)

            if digest:
                send_html_message(digest)
                logger.info(f"üì¨ –î–∞–π–¥–∂–µ—Å—Ç –¥–ª—è '{category}' –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            else:
                logger.info(f"‚è≠Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category}' –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ (–Ω–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –∞–±–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç)")

            llm_queue.task_done()
        except Exception as e:
            logger.exception(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤ llm_worker: {e}")

async def main():
    logger.info("üöÄ Starting asynchronous digest processing")
    await client.connect()

    worker_task = asyncio.create_task(llm_worker())
    digest_task = asyncio.create_task(run_digest_threads())

    await digest_task
    logger.info(f"üß™ –†–æ–∑–º—ñ—Ä —á–µ—Ä–≥–∏ –ø—ñ—Å–ª—è run_digest_threads: {llm_queue.qsize()}")
    await llm_queue.join()
    worker_task.cancel()

if __name__ == "__main__":
    init_db()
    logger.info("üê£ main.py launched")
    asyncio.run(main())
