from typing import Any
from asyncio import Queue
from digest.fetcher import fetch_posts_for_channels 
from config import GROUP_EMOJIS, MIN_POST_LENGTH, MAX_POST_LENGTH
from shared.logger import logger


class DigestThread:
    def __init__(self, category: str, channels: list[str], llm_queue: Queue[dict[str, Any]]) -> None:
        self.category = category
        self.channels = channels
        self.emoji = GROUP_EMOJIS.get(category, "üìù")
        self.llm_queue = llm_queue

    async def run(self) -> None:
        try:
            # 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ –∑ –∫–∞–Ω–∞–ª—ñ–≤
            posts = await fetch_posts_for_channels(self.channels)
            logger.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ —É –ø–æ—Ç–æ—Ü—ñ '{self.category}'")

            # –ù–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            too_short_posts = []
            too_long_posts = []
            final_posts = []

            # 2. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é
            for post in posts:
                text = post.get("text", "").strip()
                channel = post["channel"]
                message_id = post["id"]
                length = len(text)

                if length < MIN_POST_LENGTH:
                    too_short_posts.append((channel, message_id, length))
                    continue

                if length > MAX_POST_LENGTH:
                    too_long_posts.append((channel, message_id, length))
                    continue

                final_posts.append(post)

            logger.info(f"üßæ '{self.category}': {len(final_posts)} –Ω–æ–≤–∏—Ö, {len(posts) - len(final_posts)} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ")
            logger.info(f"‚úÖ –ù–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –¥–ª—è '{self.category}': {len(final_posts)}")
            logger.info(f"üßπ –í—Å—å–æ–≥–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(posts) - len(final_posts)} –ø–æ—Å—Ç—ñ–≤ —É '{self.category}'")

            for ch, msg_id, length in too_short_posts:
                logger.info(f"   ‚õî {ch}/{msg_id} ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π ({length} —Å–∏–º–≤.)")
            for ch, msg_id, length in too_long_posts:
                logger.info(f"   ‚õî {ch}/{msg_id} ‚Äî –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π ({length} —Å–∏–º–≤.)")

            # 4. –ü–µ—Ä–µ–¥–∞—á–∞ –≤—Å—ñ—Ö –ø–æ—Å—Ç—ñ–≤ –≤ LLM –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            if final_posts:
                await self.llm_queue.put({
                    "category": self.category,
                    "posts": final_posts,
                    "emoji": self.emoji
                })
            else:
                logger.info(f"üì≠ –£ –ø–æ—Ç–æ—Ü—ñ '{self.category}' –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")

            # 5. –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π LLM –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ llm_worker
            # 6. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –±–∞–Ω–µ—Ä–∞ (–æ–ø—Ü—ñ–π–Ω–æ) ‚Äî –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç—É—Ç
            # 7. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram ‚Äî –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —ñ–Ω—à–æ–º—É –º–æ–¥—É–ª—ñ

        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        except Exception as e:
            logger.error(f"üî• [{self.category}] –ü–æ–º–∏–ª–∫–∞ —É DigestThread: {e}")
