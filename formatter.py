from summarizer import summarize_texts
from logger import logger

MAX_MESSAGE_LENGTH = 4096  # –õ—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telegram

def format_digest(category: str, posts: list, emoji: str) -> str | None:
    """
    –§–æ—Ä–º—É—î HTML –¥–∞–π–¥–∂–µ—Å—Ç –¥–ª—è –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
    –Ø–∫—â–æ –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î None.
    """
    if not posts:
        logger.warning(f"üîï –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{category}' ‚Äî –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return None

    summaries = summarize_texts(posts)

    result = [f"üìö –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ —Ç–µ–º—ñ: <b>{category}</b>"]
    total_length = len(result[0]) + 2  # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∑–∞–ø–∞—Å

    for i, (post, summary) in enumerate(zip(posts, summaries), start=1):
        block = (
            f"<b>{i}. {emoji} {summary['title']}</b>\n"
            f"{summary['summary']}\n"
            f'<a href="{post["url"]}">–ß–∏—Ç–∞—Ç–∏ –ø–æ—Å—Ç</a>\n'
            f'‚Äî ‚Äî ‚Äî'
        )

        if total_length + len(block) > MAX_MESSAGE_LENGTH:
            logger.warning(f"‚úÇÔ∏è –î–∞–π–¥–∂–µ—Å—Ç '{category}' –¥–æ—Å—è–≥ –ª—ñ–º—ñ—Ç—É —Å–∏–º–≤–æ–ª—ñ–≤. –ó—É–ø–∏–Ω–∫–∞ –Ω–∞ {i} –ø–æ—Å—Ç–∞—Ö.")
            break

        result.append(block)
        total_length += len(block)

    return "\n".join(result)