from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from chat_bot_ui.bot_handlers import cmd_addchannel
import json
from config import CHANNEL_GROUPS

menu_router = Router()

@menu_router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    keyboard_buttons = [
        [KeyboardButton(text="üìå –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üì¨ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")],
    ]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω FSM, —è–∫—â–æ —î ‚Äî –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    state_data = await state.get_state()
    if state_data is not None:
        keyboard_buttons.append([KeyboardButton(text="üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")])

    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=keyboard)

@menu_router.message(F.text == "üìå –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª")
async def handle_add_channel_button(message: types.Message, state: FSMContext) -> None:
    await cmd_addchannel(message, state)

@menu_router.message(F.text == "üì¨ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç")
async def handle_digest(message: types.Message) -> None:
    await message.answer("üîß –ü–æ–∫–∏ —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.")

@menu_router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤")
async def handle_channel_list(message: types.Message) -> None:
    with open(CHANNEL_GROUPS, "r", encoding="utf-8") as f:
        groups = json.load(f)

    text = "üìö <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤:</b>\n\n"
    for group, channels in groups.items():
        text += f"<b>{group}</b>:\n" + "\n".join(channels) + "\n\n"

    await message.answer(text, parse_mode="HTML")

@menu_router.message(F.text == "üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é")
async def handle_back_to_menu(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await cmd_start(message)