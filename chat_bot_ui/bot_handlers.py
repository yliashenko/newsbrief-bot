from typing import Any, Dict
import json
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import CHANNEL_GROUPS
from main import run_digest_threads

router = Router()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ JSON
def load_channel_groups() -> Dict[str, list[str]]:
    # Ignore the Any return type because json.load can't infer structured types at runtime,
    # but we ensure it by context.
    with open(CHANNEL_GROUPS, "r", encoding="utf-8") as f:
        return json.load(f)  # type: ignore[no-any-return]

def save_channel_groups(data: Dict[str, list[str]]) -> None:
    with open(CHANNEL_GROUPS, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class AddChannelStates(StatesGroup):
    choosing_group = State()
    entering_channel = State()

# /addchannel
@router.message(F.text.in_({"/addchannel", "üìå –î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª"}))
async def cmd_addchannel(message: types.Message, state: FSMContext) -> None:
    groups = list(load_channel_groups().keys())
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=g)] for g in groups],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—ñ–∫, –¥–æ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
    await state.set_state(AddChannelStates.choosing_group)

# –≤–∏–±—ñ—Ä –ø–æ—Ç–æ–∫—É
@router.message(AddChannelStates.choosing_group)
async def process_group_choice(message: types.Message, state: FSMContext) -> None:
    group = message.text
    groups = load_channel_groups()
    if group not in groups:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø–æ—Ç–æ–∫—É –Ω–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return
    await state.update_data(group=group)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º Telegram-–∫–∞–Ω–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @example):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddChannelStates.entering_channel)

# –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É
@router.message(AddChannelStates.entering_channel)
async def process_channel_entry(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    group = data["group"]
    nickname = message.text.strip() if message.text else ""

    if not nickname.startswith("@"):
        await message.answer("‚ùå –ù—ñ–∫–Ω–µ–π–º –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ @. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    groups = load_channel_groups()

    if nickname in groups[group]:
        await message.answer("‚úÖ –¶–µ–π –∫–∞–Ω–∞–ª –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É.")
    else:
        groups[group].append(nickname)
        save_channel_groups(groups)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {nickname} –¥–æ–¥–∞–Ω–æ –¥–æ –ø–æ—Ç–æ–∫—É {group}.")

    await state.clear()

# /digest ‚Äî —Ä—É—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–∞–π–¥–∂–µ—Å—Ç—É
@router.message(F.text.in_({"/digest", "üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç"}))
async def cmd_digest(message: types.Message) -> None:
    await message.answer("üì° –ü–æ—á–∏–Ω–∞—é —Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç. –¶–µ –∑–∞–π–º–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")
    await run_digest_threads()
    await message.answer("‚úÖ –î–∞–π–¥–∂–µ—Å—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º.")
